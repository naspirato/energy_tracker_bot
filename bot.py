from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import datetime
import asyncio
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:10]}...")

bot = Bot(token=BOT_TOKEN, session_name="psycho_bot_session")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="track_data"),
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç—É—Å", callback_data="check_status")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help"),
            InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="change_sheet")
        ]
    ])
    return keyboard

def get_track_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="track_data")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])
    return keyboard

# –°–ª–æ–≤–∞—Ä—å user_id -> Google Sheet ID
try:
    with open("usersheets.json", "r") as f:
        user_sheets = json.load(f)
except:
    user_sheets = {}

# FSM
class Form(StatesGroup):
    fatigue = State()
    mood = State()
    sleep = State()
    physical_load = State()
    mental_load = State()
    symptoms = State()
    notes = State()

# Google API - optional
try:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google credentials
    google_creds_json = os.getenv('GOOGLE_CREDS_JSON')
    if google_creds_json:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            json.loads(google_creds_json), scope
        )
        client = gspread.authorize(creds)
        google_sheets_available = True
        logger.info("Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        # –ü—Ä–æ–±—É–µ–º —Ñ–∞–π–ª creds.json (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
        client = gspread.authorize(creds)
        google_sheets_available = True
        logger.info("Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ —Ñ–∞–π–ª creds.json")
        
except (FileNotFoundError, json.JSONDecodeError, KeyError) as e:
    logger.warning(f"Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}")
    google_sheets_available = False
    client = None

# –ö–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    response = """–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

üìã –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"""
    
    await message.reply(response, reply_markup=get_main_keyboard())
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

@router.message(Command("help"))
async def help_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    help_text = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîó /setsheet <—Å—Å—ã–ª–∫–∞> - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google —Ç–∞–±–ª–∏—Ü—É
   –ü—Ä–∏–º–µ—Ä: /setsheet https://docs.google.com/spreadsheets/d/...

üìä /track - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
   –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç: —É—Å—Ç–∞–ª–æ—Å—Ç—å (0-10), –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (0-10), –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞

üìà /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É

‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö!"""
    
    await message.reply(help_text)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

@router.message(Command("setsheet"))
async def set_sheet(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /setsheet –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    if not google_sheets_available:
        logger.warning(f"Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        await message.reply("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª creds.json –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏.")
        return
    
    try:
        url = message.text.split(' ')[1]
        sheet_id = url.split('/d/')[1].split('/')[0]
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID —Ç–∞–±–ª–∏—Ü—ã: {sheet_id}")
        
        user_sheets[str(user_id)] = sheet_id
        with open("usersheets.json", "w") as f:
            json.dump(user_sheets, f)
        
        logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {sheet_id} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        await message.reply(
            "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\n\nüìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
            reply_markup=get_track_keyboard()
        )
    except IndexError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É")
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: /setsheet <—Å—Å—ã–ª–∫–∞>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")

@router.message(Command("track"))
async def track(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /track –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    if not google_sheets_available:
        logger.warning(f"Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        await message.reply("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª creds.json –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏.")
        return
    
    user_id_str = str(user_id)
    if user_id_str not in user_sheets:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª —Ç–∞–±–ª–∏—Ü—É")
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /setsheet")
        return
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    await message.reply("–£—Å—Ç–∞–ª–æ—Å—Ç—å (0‚Äì10)?")
    await state.set_state(Form.fatigue)

@router.message(Command("status"))
async def status_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    user_id_str = str(user_id)
    if user_id_str in user_sheets:
        sheet_id = user_sheets[user_id_str]
        status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüìä ID —Ç–∞–±–ª–∏—Ü—ã: {sheet_id}\n\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"
    else:
        status_text = "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\nüîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setsheet <—Å—Å—ã–ª–∫–∞> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"
    
    await message.reply(status_text)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def handle_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or "Unknown"
    data = callback.data
    
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")
    
    if data == "track_data":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        user_id_str = str(user_id)
        if user_id_str not in user_sheets:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É!", show_alert=True)
            await callback.message.edit_text(
                "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\nüîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setsheet <—Å—Å—ã–ª–∫–∞> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã",
                reply_markup=get_main_keyboard()
            )
            return
        
        await callback.answer("üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö...")
        await callback.message.edit_text("–£—Å—Ç–∞–ª–æ—Å—Ç—å (0‚Äì10)?")
        await state.set_state(Form.fatigue)
        
    elif data == "check_status":
        user_id_str = str(user_id)
        if user_id_str in user_sheets:
            sheet_id = user_sheets[user_id_str]
            status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüìä ID —Ç–∞–±–ª–∏—Ü—ã: {sheet_id}\n\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'"
        else:
            status_text = "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\nüîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setsheet <—Å—Å—ã–ª–∫–∞> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"
        
        await callback.message.edit_text(status_text, reply_markup=get_main_keyboard())
        
    elif data == "show_help":
        help_text = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîó /setsheet <—Å—Å—ã–ª–∫–∞> - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google —Ç–∞–±–ª–∏—Ü—É
üìä /track - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
üìà /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"""
        
        await callback.message.edit_text(help_text, reply_markup=get_main_keyboard())
        
    elif data == "change_sheet":
        await callback.message.edit_text(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É:\n\n/setsheet <—Å—Å—ã–ª–∫–∞>",
            reply_markup=get_main_keyboard()
        )
        
    elif data == "main_menu":
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

@router.message(Form.fatigue)
async def get_fatigue(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    fatigue = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å –æ—Ç {username}: {fatigue}")
    
    await state.update_data(fatigue=fatigue)
    await message.reply("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (0‚Äì10)?")
    await state.set_state(Form.mood)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é mood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.mood)
async def get_mood(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    mood = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç {username}: {mood}")
    
    await state.update_data(mood=mood)
    await message.reply("–ö–∞–∫ —Å–ø–∞–ª?")
    await state.set_state(Form.sleep)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é sleep –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.sleep)
async def get_sleep(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    sleep = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–æ–Ω –æ—Ç {username}: {sleep}")
    
    await state.update_data(sleep=sleep)
    await message.reply("–§–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (0‚Äì10)?")
    await state.set_state(Form.physical_load)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é physical_load –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.physical_load)
async def get_physical_load(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    physical_load = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Ç {username}: {physical_load}")
    
    await state.update_data(physical_load=physical_load)
    await message.reply("–£–º—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (0‚Äì10)?")
    await state.set_state(Form.mental_load)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é mental_load –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.mental_load)
async def get_mental_load(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    mental_load = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É–º—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Ç {username}: {mental_load}")
    
    await state.update_data(mental_load=mental_load)
    await message.reply("–°–∏–º–ø—Ç–æ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)?")
    await state.set_state(Form.symptoms)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é symptoms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.symptoms)
async def get_symptoms(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    symptoms = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Å–∏–º–ø—Ç–æ–º—ã –æ—Ç {username}: {symptoms}")
    
    await state.update_data(symptoms=symptoms)
    await message.reply("–ó–∞–º–µ—Ç–∫–∏/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")
    await state.set_state(Form.notes)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é notes –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.notes)
async def get_notes(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    notes = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏ –æ—Ç {username}: {notes}")
    
    await state.update_data(notes=notes)
    data = await state.get_data()
    user_id_str = str(user_id)
    
    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç {username}: fatigue={data.get('fatigue')}, mood={data.get('mood')}, sleep={data.get('sleep')}, physical_load={data.get('physical_load')}, mental_load={data.get('mental_load')}, symptoms={data.get('symptoms')}, notes={data.get('notes')}")

    if user_id_str not in user_sheets:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª —Ç–∞–±–ª–∏—Ü—É")
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /setsheet")
        return

    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        sheet = client.open_by_key(user_sheets[user_id_str]).sheet1
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        row_data = [
            now, 
            data.get('fatigue', ''), 
            data.get('mood', ''), 
            data.get('sleep', ''),
            data.get('physical_load', ''),
            data.get('mental_load', ''),
            data.get('symptoms', ''),
            data.get('notes', '')
        ]
        logger.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É: {row_data}")
        
        sheet.append_row(row_data)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
        await message.reply(
            "‚úÖ –ó–∞–ø–∏—Å–∞–ª! üôå\n\nüìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å?",
            reply_markup=get_track_keyboard()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}")
    
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        logger.info("üì° –£–¥–∞–ª–µ–Ω–∏–µ webhook...")
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º polling...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == '__main__':
    asyncio.run(main())
