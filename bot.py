from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import datetime
import asyncio
import logging
import os
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:10]}...")

bot = Bot(token=BOT_TOKEN, session_name="psycho_bot_session")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã
async def create_user_sheet(user_id: str, username: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç–æ–π
        from datetime import datetime
        current_date = datetime.now().strftime("%Y-%m-%d")
        sheet_name = f"Energy Tracker - {username} ({current_date})"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        sheet = client.create(sheet_name)
        sheet_id = sheet.id
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet = sheet.sheet1
        headers = [
            "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            "–£—Å—Ç–∞–ª–æ—Å—Ç—å (0-10)",
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (0-10)", 
            "–°–æ–Ω",
            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (0-10)",
            "–£–º—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (0-10)",
            "–°–∏–º–ø—Ç–æ–º—ã",
            "–ó–∞–º–µ—Ç–∫–∏"
        ]
        worksheet.append_row(headers)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)
        worksheet.format('A1:H1', {
            'textFormat': {'bold': True},
            'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
        })
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column_width(1, 150)  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        worksheet.set_column_width(2, 120)  # –£—Å—Ç–∞–ª–æ—Å—Ç—å
        worksheet.set_column_width(3, 120)  # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        worksheet.set_column_width(4, 100)  # –°–æ–Ω
        worksheet.set_column_width(5, 150)  # –§–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        worksheet.set_column_width(6, 150)  # –£–º—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        worksheet.set_column_width(7, 200)  # –°–∏–º–ø—Ç–æ–º—ã
        worksheet.set_column_width(8, 250)  # –ó–∞–º–µ—Ç–∫–∏
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {sheet_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        return sheet_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        raise

async def add_column_to_sheet(sheet_id: str, column_name: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        sheet = client.open_by_key(sheet_id).sheet1
        all_values = sheet.get_all_values()
        
        if not all_values:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü (A=1, B=2, etc.)
        last_column = len(all_values[0])
        new_column_letter = chr(ord('A') + last_column)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        sheet.update(f'{new_column_letter}1', column_name)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        sheet.format(f'{new_column_letter}1', {
            'textFormat': {'bold': True},
            'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
        })
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{column_name}' –≤ —Ç–∞–±–ª–∏—Ü—É {sheet_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü—É {sheet_id}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="track_data"),
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç—É—Å", callback_data="check_status")
        ],
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="create_sheet"),
            InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="connect_sheet")
        ],
        [
            InlineKeyboardButton(text="üìã –ò–∑–º–µ—Ä–µ–Ω–∏—è", callback_data="manage_measurements"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")
        ]
    ])
    return keyboard

def get_track_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="track_data")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])
    return keyboard

# –°–ª–æ–≤–∞—Ä—å user_id -> Google Sheet ID (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
user_sheets = {}

# FSM
class Form(StatesGroup):
    fatigue = State()
    mood = State()
    sleep = State()
    physical_load = State()
    mental_load = State()
    symptoms = State()
    notes = State()
    custom_measurement = State()  # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
class MeasurementForm(StatesGroup):
    measurement_name = State()
    measurement_type = State()
    min_value = State()
    max_value = State()

# Google API - optional
try:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google credentials
    google_creds_json = os.getenv('GOOGLE_CREDS_JSON')
    if google_creds_json:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            json.loads(google_creds_json), scope
        )
        client = gspread.authorize(creds)
        google_sheets_available = True
        logger.info("Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        # –ü—Ä–æ–±—É–µ–º —Ñ–∞–π–ª creds.json (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
        client = gspread.authorize(creds)
        google_sheets_available = True
        logger.info("Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ —Ñ–∞–π–ª creds.json")
        
except (FileNotFoundError, json.JSONDecodeError, KeyError) as e:
    logger.warning(f"Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}")
    google_sheets_available = False
    client = None

# –ö–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    response = f"""–ü—Ä–∏–≤–µ—Ç, {username}! üëã –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

üìã –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É"""
    
    await message.reply(response, reply_markup=get_main_keyboard())
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

@router.message(Command("help"))
async def help_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    help_text = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

‚ûï /createsheet - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
üîó /setsheet <—Å—Å—ã–ª–∫–∞> - –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
   –ü—Ä–∏–º–µ—Ä: /setsheet https://docs.google.com/spreadsheets/d/...

üìä /track - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
   –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç: —É—Å—Ç–∞–ª–æ—Å—Ç—å (0-10), –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (0-10), –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞

üìà /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É

‚ûï /addmeasurement - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
üìã /measurements - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è

‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /createsheet!"""
    
    await message.reply(help_text)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

@router.message(Command("addmeasurement"))
async def add_measurement(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /addmeasurement –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    user_id_str = str(user_id)
    if user_id_str not in user_sheets:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /createsheet –∏–ª–∏ /setsheet")
        return
    
    await message.reply("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è:")
    await state.set_state(MeasurementForm.measurement_name)
    logger.info(f"–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Command("measurements"))
async def show_measurements(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /measurements –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    user_id_str = str(user_id)
    measurements = await db.get_custom_measurements(user_id_str)
    
    if not measurements:
        await message.reply("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addmeasurement –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
        return
    
    measurements_text = "üìã –í–∞—à–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n\n"
    for i, measurement in enumerate(measurements, 1):
        if measurement['type'] == 'numeric':
            measurements_text += f"{i}. {measurement['name']} (0-{measurement['max_value']})\n"
        else:
            measurements_text += f"{i}. {measurement['name']} (—Ç–µ–∫—Å—Ç)\n"
    
    measurements_text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addmeasurement –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
    
    await message.reply(measurements_text)
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

@router.message(Command("createsheet"))
async def create_sheet(message: Message):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /createsheet –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    if not google_sheets_available:
        logger.warning(f"Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        await message.reply("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª creds.json –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        await message.reply("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∞—Å...")
        sheet_id = await create_user_sheet(str(user_id), username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            success = await db.set_user_sheet(str(user_id), sheet_id)
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                user_sheets[str(user_id)] = sheet_id
                
                sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}"
                logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {sheet_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                await message.reply(
                    f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\n\n"
                    f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\n"
                    f"üìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
                    reply_markup=get_track_keyboard(),
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–∞–∫ fallback
            user_sheets[str(user_id)] = sheet_id
            sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}"
            logger.warning(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            await message.reply(
                f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞! (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)\n\n"
                f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\n"
                f"üìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
                reply_markup=get_track_keyboard(),
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")

@router.message(Command("setsheet"))
async def set_sheet(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /setsheet –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    if not google_sheets_available:
        logger.warning(f"Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        await message.reply("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª creds.json –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏.")
        return
    
    try:
        url = message.text.split(' ')[1]
        sheet_id = url.split('/d/')[1].split('/')[0]
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID —Ç–∞–±–ª–∏—Ü—ã: {sheet_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            success = await db.set_user_sheet(str(user_id), sheet_id)
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                user_sheets[str(user_id)] = sheet_id
                
                logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {sheet_id} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                await message.reply(
                    "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\n\nüìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
                    reply_markup=get_track_keyboard()
                )
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–∞–∫ fallback
            user_sheets[str(user_id)] = sheet_id
            logger.warning(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            await message.reply(
                "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)\n\nüìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
                reply_markup=get_track_keyboard()
            )
    except IndexError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É")
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: /setsheet <—Å—Å—ã–ª–∫–∞>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")

@router.message(Command("track"))
async def track(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /track –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    if not google_sheets_available:
        logger.warning(f"Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        await message.reply("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª creds.json –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏.")
        return
    
    user_id_str = str(user_id)
    if user_id_str not in user_sheets:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª —Ç–∞–±–ª–∏—Ü—É")
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /setsheet")
        return
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    await message.reply("–£—Å—Ç–∞–ª–æ—Å—Ç—å (0‚Äì10)?")
    await state.set_state(Form.fatigue)

@router.message(Command("status"))
async def status_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    user_id_str = str(user_id)
    if user_id_str not in user_sheets:
        status_text = "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\nüîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setsheet <—Å—Å—ã–ª–∫–∞> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"
        await message.reply(status_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        return
    
    try:
        sheet_id = user_sheets[user_id_str]
        sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        if google_sheets_available and client:
            sheet = client.open_by_key(sheet_id).sheet1
            all_values = sheet.get_all_values()
            
            if len(all_values) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
                status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\nüìä –ó–∞–ø–∏—Å–µ–π: 0\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏"
            else:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                total_records = len(all_values) - 1
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
                last_record = all_values[-1]
                last_date = last_record[0] if last_record else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}\nüìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_date}\n\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"
        else:
            status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\n‚ö†Ô∏è Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"
    
    await message.reply(status_text, parse_mode="Markdown", disable_web_page_preview=True)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def handle_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or "Unknown"
    data = callback.data
    
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")
    
    if data == "track_data":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        user_id_str = str(user_id)
        if user_id_str not in user_sheets:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É!", show_alert=True)
            await callback.message.edit_text(
                "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\nüîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setsheet <—Å—Å—ã–ª–∫–∞> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã",
                reply_markup=get_main_keyboard()
            )
            return
        
        await callback.answer("üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö...")
        await callback.message.edit_text("–£—Å—Ç–∞–ª–æ—Å—Ç—å (0‚Äì10)?")
        await state.set_state(Form.fatigue)
        
    elif data == "check_status":
        user_id_str = str(user_id)
        if user_id_str not in user_sheets:
            status_text = "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\nüîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setsheet <—Å—Å—ã–ª–∫–∞> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"
            await callback.message.edit_text(status_text, reply_markup=get_main_keyboard())
            return
        
        try:
            sheet_id = user_sheets[user_id_str]
            sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            if google_sheets_available and client:
                sheet = client.open_by_key(sheet_id).sheet1
                all_values = sheet.get_all_values()
                
                if len(all_values) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
                    status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\nüìä –ó–∞–ø–∏—Å–µ–π: 0\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ' –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏"
                else:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                    total_records = len(all_values) - 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
                    last_record = all_values[-1]
                    last_date = last_record[0] if last_record else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}\nüìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_date}\n\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ' –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"
            else:
                status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\n‚ö†Ô∏è Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
            status_text = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\nüîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'"
        
        await callback.message.edit_text(status_text, reply_markup=get_main_keyboard(), parse_mode="Markdown", disable_web_page_preview=True)
        
    elif data == "create_sheet":
        if not google_sheets_available:
            await callback.answer("‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!", show_alert=True)
            return
        
        await callback.answer("üîÑ –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É...")
        try:
            sheet_id = await create_user_sheet(str(user_id), username)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await db.set_user_sheet(str(user_id), sheet_id)
            if success:
                user_sheets[str(user_id)] = sheet_id
                sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}"
                
                await callback.message.edit_text(
                    f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\n\n"
                    f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({sheet_url})\n\n"
                    f"üìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
                    reply_markup=get_main_keyboard(),
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_main_keyboard()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}",
                reply_markup=get_main_keyboard()
            )
    
    elif data == "connect_sheet":
        await callback.message.edit_text(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É:\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/setsheet <—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ç–∞–±–ª–∏—Ü—É>",
            reply_markup=get_main_keyboard()
        )
    
    elif data == "manage_measurements":
        user_id_str = str(user_id)
        measurements = await db.get_custom_measurements(user_id_str)
        
        if not measurements:
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addmeasurement –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        else:
            measurements_text = "üìã –í–∞—à–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n\n"
            for i, measurement in enumerate(measurements, 1):
                if measurement['type'] == 'numeric':
                    measurements_text += f"{i}. {measurement['name']} (0-{measurement['max_value']})\n"
                else:
                    measurements_text += f"{i}. {measurement['name']} (—Ç–µ–∫—Å—Ç)\n"
            
            measurements_text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addmeasurement –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
            
            await callback.message.edit_text(
                measurements_text,
                reply_markup=get_main_keyboard()
            )
        
    elif data == "show_help":
        help_text = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

‚ûï /createsheet - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
üîó /setsheet <—Å—Å—ã–ª–∫–∞> - –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
üìä /track - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
üìà /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
‚ûï /addmeasurement - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
üìã /measurements - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"""
        
        await callback.message.edit_text(help_text, reply_markup=get_main_keyboard())
        
    elif data == "main_menu":
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

@router.message(Form.fatigue)
async def get_fatigue(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    fatigue = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å –æ—Ç {username}: {fatigue}")
    
    await state.update_data(fatigue=fatigue)
    await message.reply("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (0‚Äì10)?")
    await state.set_state(Form.mood)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é mood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.mood)
async def get_mood(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    mood = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç {username}: {mood}")
    
    await state.update_data(mood=mood)
    await message.reply("–ö–∞–∫ —Å–ø–∞–ª?")
    await state.set_state(Form.sleep)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é sleep –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.sleep)
async def get_sleep(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    sleep = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–æ–Ω –æ—Ç {username}: {sleep}")
    
    await state.update_data(sleep=sleep)
    await message.reply("–§–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (0‚Äì10)?")
    await state.set_state(Form.physical_load)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é physical_load –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.physical_load)
async def get_physical_load(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    physical_load = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Ç {username}: {physical_load}")
    
    await state.update_data(physical_load=physical_load)
    await message.reply("–£–º—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (0‚Äì10)?")
    await state.set_state(Form.mental_load)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é mental_load –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.mental_load)
async def get_mental_load(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    mental_load = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É–º—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Ç {username}: {mental_load}")
    
    await state.update_data(mental_load=mental_load)
    await message.reply("–°–∏–º–ø—Ç–æ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)?")
    await state.set_state(Form.symptoms)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é symptoms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.symptoms)
async def get_symptoms(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    symptoms = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Å–∏–º–ø—Ç–æ–º—ã –æ—Ç {username}: {symptoms}")
    
    await state.update_data(symptoms=symptoms)
    await message.reply("–ó–∞–º–µ—Ç–∫–∏/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")
    await state.set_state(Form.notes)
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é notes –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

@router.message(Form.notes)
async def get_notes(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    notes = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏ –æ—Ç {username}: {notes}")
    
    await state.update_data(notes=notes)
    user_id_str = str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    custom_measurements = await db.get_custom_measurements(user_id_str)
    
    if custom_measurements:
        # –ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º –∏—Ö —Å–±–æ—Ä
        await state.update_data(custom_measurements=custom_measurements, current_measurement_index=0)
        await ask_next_custom_measurement(message, state)
    else:
        # –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await save_complete_data(message, state)

async def ask_next_custom_measurement(message: Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ"""
    data = await state.get_data()
    custom_measurements = data.get('custom_measurements', [])
    current_index = data.get('current_measurement_index', 0)
    
    if current_index >= len(custom_measurements):
        # –í—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await save_complete_data(message, state)
        return
    
    measurement = custom_measurements[current_index]
    measurement_name = measurement['name']
    measurement_type = measurement['type']
    
    if measurement_type == 'numeric':
        max_value = measurement['max_value']
        await message.reply(f"{measurement_name} (0-{max_value})?")
    else:
        await message.reply(f"{measurement_name} (—Ç–µ–∫—Å—Ç)?")
    
    await state.update_data(current_measurement=measurement)
    await state.set_state(Form.custom_measurement)
    logger.info(f"–°–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {measurement_name}")

@router.message(Form.custom_measurement)
async def get_custom_measurement(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    value = message.text
    
    data = await state.get_data()
    current_measurement = data.get('current_measurement')
    current_index = data.get('current_measurement_index', 0)
    custom_measurements = data.get('custom_measurements', [])
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
    if current_measurement['type'] == 'numeric':
        try:
            num_value = int(value)
            max_value = current_measurement['max_value']
            if num_value < 0 or num_value > max_value:
                await message.reply(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ {max_value}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    measurement_name = current_measurement['name']
    custom_values = data.get('custom_values', {})
    custom_values[measurement_name] = value
    await state.update_data(custom_values=custom_values)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é
    next_index = current_index + 1
    await state.update_data(current_measurement_index=next_index)
    
    if next_index < len(custom_measurements):
        await ask_next_custom_measurement(message, state)
    else:
        # –í—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await save_complete_data(message, state)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {measurement_name}: {value}")

async def save_complete_data(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    data = await state.get_data()
    user_id_str = str(user_id)
    
    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç {username}: fatigue={data.get('fatigue')}, mood={data.get('mood')}, sleep={data.get('sleep')}, physical_load={data.get('physical_load')}, mental_load={data.get('mental_load')}, symptoms={data.get('symptoms')}, notes={data.get('notes')}, custom_values={data.get('custom_values', {})}")

    if user_id_str not in user_sheets:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª —Ç–∞–±–ª–∏—Ü—É")
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /setsheet")
        return

    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        sheet = client.open_by_key(user_sheets[user_id_str]).sheet1
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        row_data = [
            now, 
            data.get('fatigue', ''), 
            data.get('mood', ''), 
            data.get('sleep', ''),
            data.get('physical_load', ''),
            data.get('mental_load', ''),
            data.get('symptoms', ''),
            data.get('notes', '')
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        custom_measurements = data.get('custom_measurements', [])
        custom_values = data.get('custom_values', {})
        
        for measurement in custom_measurements:
            measurement_name = measurement['name']
            value = custom_values.get(measurement_name, '')
            row_data.append(value)
        
        logger.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É: {row_data}")
        
        sheet.append_row(row_data)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
        await message.reply(
            "‚úÖ –ó–∞–ø–∏—Å–∞–ª! üôå\n\nüìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å?",
            reply_markup=get_track_keyboard()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}")
    
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
@router.message(MeasurementForm.measurement_name)
async def get_measurement_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    measurement_name = message.text.strip()
    
    if len(measurement_name) > 50:
        await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(measurement_name=measurement_name)
    await message.reply(
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {measurement_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n"
        f"1Ô∏è‚É£ –¶–∏—Ñ—Ä–æ–≤–æ–π (0-10)\n"
        f"2Ô∏è‚É£ –¢–µ–∫—Å—Ç–æ–≤—ã–π\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2:"
    )
    await state.set_state(MeasurementForm.measurement_type)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç {username}: {measurement_name}")

@router.message(MeasurementForm.measurement_type)
async def get_measurement_type(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    measurement_type = message.text.strip()
    
    if measurement_type not in ['1', '2']:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2:")
        return
    
    measurement_type = 'numeric' if measurement_type == '1' else 'text'
    await state.update_data(measurement_type=measurement_type)
    
    if measurement_type == 'numeric':
        await message.reply(
            f"üìä –¢–∏–ø: –¶–∏—Ñ—Ä–æ–≤–æ–π\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10):"
        )
        await state.set_state(MeasurementForm.max_value)
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data = await state.get_data()
        await save_measurement(message, state, data)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç {username}: {measurement_type}")

@router.message(MeasurementForm.max_value)
async def get_max_value(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    max_value_text = message.text.strip()
    
    try:
        max_value = int(max_value_text)
        if max_value < 1 or max_value > 100:
            await message.reply("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100:")
            return
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.update_data(max_value=max_value)
    data = await state.get_data()
    await save_measurement(message, state, data)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç {username}: {max_value}")

async def save_measurement(message: Message, state: FSMContext, data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    user_id_str = str(user_id)
    
    measurement_name = data.get('measurement_name')
    measurement_type = data.get('measurement_type')
    max_value = data.get('max_value', 10)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.add_custom_measurement(
        user_id_str, 
        measurement_name, 
        measurement_type, 
        0, 
        max_value
    )
    
    if success:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet_id = user_sheets[user_id_str]
        column_added = await add_column_to_sheet(sheet_id, measurement_name)
        
        if column_added:
            await message.reply(
                f"‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ '{measurement_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                f"üìä –¢–∏–ø: {'–¶–∏—Ñ—Ä–æ–≤–æ–π (0-' + str(max_value) + ')' if measurement_type == 'numeric' else '–¢–µ–∫—Å—Ç–æ–≤—ã–π'}\n"
                f"üìù –°—Ç–æ–ª–±–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.reply(
                f"‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ '{measurement_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É!\n\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
    else:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()
    logger.info(f"–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {measurement_name}")

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        try:
            await db.init()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...")
        global user_sheets
        try:
            user_sheets = await db.get_all_user_sheets()
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_sheets)} –ø—Ä–∏–≤—è–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ç–∞–±–ª–∏—Ü–∞–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            user_sheets = {}
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        logger.info("üì° –£–¥–∞–ª–µ–Ω–∏–µ webhook...")
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º polling...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == '__main__':
    asyncio.run(main())
